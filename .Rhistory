plot.30dha <- as.numeric(outcome[, 11])
hist(plot.30dha)
dim(outcome)
test <- outcome[, c(2, 7, 11, 17, 23)]
head(test)
names(test) <- c('Hospital', 'State', 'Heart.Attack', 'Heart.Failure', 'Pneumonia')
head(test)
as_tibble(test)
state <- unique(test$State)
state[1:10]
state[11:25]
state[26:40]
state[41:54]
nchar("FL")
"FL" %in% state
!("FL" %in% state)
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
outcome_col['heart attack']
z <- outcome_col['heart attack']
class(z)
z
best <- function(state, outcome) {
## Read outcome data
dfile <- read.csv('outcome-of-care-measures.csv')
## Check that state and outcome are valid
# Hospital Name varchar(50) = col 2
# State varchar(2) = col 7
# Hospital 30-day Death Rates from Heart Attack =  col 11
# Hospital 30-day Death Rates from Heart Failure = col 17
# Hospital 30-day Death Rates from Pneumonia = col 23
subfile <- dfile[, c(2, 7, 11, 17, 23)]
names(subfile) <- c('Hospital', 'State', 'Heart.Attack', 'Heart.Failure', 'Pneumonia')
state_list <- unique(subfile$State)
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
# Check state validity
if (nchar(as.character(state) != 2 & !(state %in% state_list))) {
stop('invalid state')
}
# Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid state')
}
## Return hospital name in that state with lowest 30-day death rate
# filter states
subfile <- subfile[subfile$State == state, ]
subfile <- subfile[order(outcome_col(outcome), 1)]
subfile[1, 1]
}
best('TX', 'heart attack')
class(state)
sort(state)
"TX" %in% sort(state)
state <- "TX"
outcome <- 'heart attack'
dfile <- read.csv('outcome-of-care-measures.csv')
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'Heart.Attack', 'Heart.Failure', 'Pneumonia')
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
if (nchar(as.character(state) != 2 & !(state %in% state_list))) {
stop('invalid state')
}
nchar(as.character(state)
)
!(state %in% state_list)
# Check state validity
if (nchar(as.character(state)) != 2 & !(state %in% state_list)) {
stop('invalid state')
}
# Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid state')
}
subfile <- subfile[subfile$State == state, ]
subfile <- subfile[order(outcome_col(outcome), 1)]
outcome_col(outcome)
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
outcome_col[outcome]
outcome_col[outcome][1]
outcome_col[[outcome]]
subfile <- subfile[order(outcome_col[[outcome]], 1)]
subfile[1, 1]
head(subfile)
dfile <- read.csv('outcome-of-care-measures.csv')
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
head(subfile)
names(subfile) <- c('Hospital', 'State', 'Heart.Attack', 'Heart.Failure', 'Pneumonia')
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
subfile <- subfile[subfile$State == state, ]
head(subfile)
head(subfile[order(3), ])
names(subfile) <- c('Hospital', 'State', 'heart attack', 'heart failure', 'pneumonia')
head(subfile[order(3), ])
as_tibble(subfile)
DF[cols.num] <- sapply(DF[cols.num],as.numeric)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
subfile <- subfile[subfile$State == state, ]
subfile[order(3), ]
subfile[order(outcome), ]
as_tibble(subfile)
head(subfile[, order(3)])
newdata <- subfile[order('heart atack'),]
newdata
df <-subfile[order(subfile$`heart attack`),]
head(df)
df <-subfile[order(col(3)), ]
df <-subfile[order(subfile[, 3], subfile[, 1]), ]
head(df)
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/best.R')
best("TX", "heart attack")
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/best.R')
best("BB", "heart attack")
"BB" %in% state_list
TRUE & FALSE
TRUE && FALSE
TRUE | FALSE
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/best.R')
best("BB", "heart attack")
best("NY", "hert attack")
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/best.R')
best("NY", "hert attack")
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/rankhospital.R', encoding = 'UTF-8')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worse")
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/rankhospital.R', encoding = 'UTF-8')
rankhospital("MD", "heart attack", "worst")
nrow(subfile)
state <- "MD"
outcome <- "heart attack"
num <- 'worst'
dfile <- read.csv('outcome-of-care-measures.csv')
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'heart.attack', 'heart.failure', 'pneumonia')
options(warn = -1)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
options(warn = 0)
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
## Check state validity
if (nchar(as.character(state)) != 2 | !(state %in% state_list)) {
stop('invalid state')
}
## Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid outcome')
}
subfile <- subfile[subfile$State == state, ]
head(subfile)
subfile <- subfile[order(subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
head(subfile)
tail(subfile)
test <- subfile[complete.cases(subfile[, outcome_col[[outcome]]], )
]
test <- subfile[complete.cases(subfile[, outcome_col[[outcome]]])
]
is.na(subfile[, outcome_col[[outcome]]], )
subfile[, 3]
is.na(subfile[, outcome_col[[outcome]]])
test <- complete.cases(subfile[, outcome_col[[outcome]]])
test <- subfile[, outcome_col[[outcome]]][complete.cases(subfile[, outcome_col[[outcome]]])]
length(test)
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/rankhospital.R', encoding = 'UTF-8')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rank(1:10, na.last = TRUE, ties.method = 'first')
t <- split(subfile, subfile$State)
t
head(df)
tail(df)
dfile <- read.csv('outcome-of-care-measures.csv')
t <- split(dfile, subfile$State)
t <- split(dfile, dfile$State)
head(t)
rm(t)
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'heart.attack', 'heart.failure', 'pneumonia')
options(warn = -1)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
options(warn = 0)
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
## Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid outcome')
}
temp <- split(subfile, subfile$State)
head(temp)
class(temp)
temp2 <- lapply(temp, function(x) x[10, ])
temp2
temp2 <- mapply(temp, function(x) x[10, ])
temp2 <- tapply(temp, function(x) x[10, ])
temp2 <- lapply(temp, function(x) x[10, ])
temp2 <- sapply(temp, function(x) x[10, ])
ttemp
temp2
temp2 <- sapply(temp, function(x) x[10, ], na.rm = TRUE)
temp2[1]
temp2[2]
temp2[3]
test <- subfile[complete.cases(subfile[, outcome_col[[outcome]]])]
test <- subfile[complete.cases(subfile[, outcome_col[[outcome]]]), ]
num <- 20
dfile <- read.csv('outcome-of-care-measures.csv')
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'heart.attack', 'heart.failure', 'pneumonia')
options(warn = -1)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
options(warn = 0)
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
## Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
##
## Order by outcome and Hospital Name
subfile <- subfile[order(subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
## Remove NAs
subfile <- subfile[complete.cases(subfile[, outcome_col[[outcome]]]), ]
head(subfile, 20)
subfile <- subfile[order(-subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
head(subfile, 20)
subfile <- subfile[order(subfile[, 2], subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
head(subfile, 20)
subfile <- subfile[order(subfile[, 2], -subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
head(subfile, 20)
is.numeric("worst")
!is.numeric(num)
rm(temp)
rm(temp2)
tm(test)
rm(test)
tm(z)
rm(z)
rm(plot.30dha)
## Read outcome data
dfile <- read.csv('outcome-of-care-measures.csv')
## Check that state and outcome are valid
# Hospital Name varchar(50) = col 2
# State varchar(2) = col 7
# Hospital 30-day Death Rates from Heart Attack =  col 11
# Hospital 30-day Death Rates from Heart Failure = col 17
# Hospital 30-day Death Rates from Pneumonia = col 23
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'heart.attack', 'heart.failure', 'pneumonia')
options(warn = -1)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
options(warn = 0)
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
## Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
##
## Remove NAs
subfile <- subfile[complete.cases(subfile[, outcome_col[[outcome]]]), ]
## Order by outcome and Hospital Name
subfile <- subfile[order(subfile[, 2], subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
if (num == 'worst') {
subfile <- subfile[order(subfile[, 2], -subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
}
if (!is.numeric(num)) {
num <- 1
}
## Return a data frame with the hospital names and the ## (abbreviated) state name
temp <- split(subfile, subfile$State)
t <- sapply(temp, '[', num)
t <- sapply(temp, '[', 5)
t <- sapply(temp, '[', 20)
t <- sapply(temp, '[', 5)
head(t)
head(temp)
str(temp)
temp$AK[20, ]
temp$AL[20, ]
temp$AR[20, ]
lapply(test, function(x) with(x, x[num, ]))
lapply(temp, function(x) with(x, x[num, ]))
tapply(temp, function(x) with(x, x[num, ]))
rm(t)
t <- tapply(temp, function(x) with(x, x[num, ]))
t <- lapply(temp, function(x) with(x, x[num, ]))
t[1, ]
str(t)
t[[1, ]]
t[1, ]
t[[1]]
t[[2]]
t[[3]]
class(t[[3]])
t[[3]][[1]]
state_list[1]
state_list[2]
state_list[3]
t[[1]][[1]]
t[[2]][[1]]
t[[3]][[1]]
a <- seq_along(state_list)
rm(newdata)
rm(t)
rm(a)
dfile <- read.csv('outcome-of-care-measures.csv')
## Check that state and outcome are valid
# Hospital Name varchar(50) = col 2
# State varchar(2) = col 7
# Hospital 30-day Death Rates from Heart Attack =  col 11
# Hospital 30-day Death Rates from Heart Failure = col 17
# Hospital 30-day Death Rates from Pneumonia = col 23
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'heart.attack', 'heart.failure', 'pneumonia')
options(warn = -1)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
options(warn = 0)
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
## Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
##
## Remove NAs
subfile <- subfile[complete.cases(subfile[, outcome_col[[outcome]]]), ]
## Order by outcome and Hospital Name
subfile <- subfile[order(subfile[, 2], subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
if (num == 'worst') {
subfile <- subfile[order(subfile[, 2], -subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
}
if (!is.numeric(num)) {
num <- 1
}
## Return a data frame with the hospital names and the ## (abbreviated) state name
temp <- split(subfile, subfile$State)
temp <- lapply(temp, function(x) with(x, x[num, ]))
df <- data.frame(Hospital = character(), State = character())
for (number in seq_along(state_list)) {
df[number, 1] <- temp[[number]][[1]]
df[number, 2] <- state_list[number]
}
head(df)
head(df, 10)
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/rankall.R', encoding = 'UTF-8')
# 4 Ranking hospitals in all states
#
# Write a function called rankall that takes two arguments: an outcome name
# (outcome) and a hospital ranking (num). The function reads the
# outcome-of-care-measures.csv ﬁle and returns a 2-column data frame containing
# the hospital in each state that has the ranking speciﬁed in num. For example
# the function call rankall("heart attack", "best") would return a data frame
# containing the names of the hospitals that are the best in their respective
# states for 30-day heart attack death rates. The function should return a value
# for every state (some may be NA). The ﬁrst column in the data frame is named
# hospital, which contains the hospital name, and the second column is named
# state, which contains the 2-character abbreviation for the state name.
# Hospitals that do not have data on a particular outcome should be excluded
# from the set of hospitals when deciding the rankings.
# Handling ties. The rankall function should handle ties in the 30-day mortality
# rates in the same way that the rankhospital function handles ties.
rankall <- function(outcome, num = "best") {
## Read outcome data
dfile <- read.csv('outcome-of-care-measures.csv')
## Check that state and outcome are valid
# Hospital Name varchar(50) = col 2
# State varchar(2) = col 7
# Hospital 30-day Death Rates from Heart Attack =  col 11
# Hospital 30-day Death Rates from Heart Failure = col 17
# Hospital 30-day Death Rates from Pneumonia = col 23
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'heart.attack', 'heart.failure', 'pneumonia')
options(warn = -1)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
options(warn = 0)
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
## Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
##
## Remove NAs
subfile <- subfile[complete.cases(subfile[, outcome_col[[outcome]]]), ]
## Order by outcome and Hospital Name
subfile <- subfile[order(subfile[, 2], subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
if (num == 'worst') {
subfile <- subfile[order(subfile[, 2], -subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
}
if (!is.numeric(num)) {
num <- 1
}
## Return a data frame with the hospital names and the ## (abbreviated) state name
temp <- split(subfile, subfile$State)
temp <- lapply(temp, function(x) with(x, x[num, ]))
## Initiate an empty data frame
df <- data.frame(Hospital = character(), State = character())
for (number in seq_along(state_list)) {
df[number, 1] <- temp[[number]][[1]]
df[number, 2] <- state_list[number]
}
df
}
t <- rankall('pneumonia', 'worst')
tail(t)
t <- rankall('heart failure')
tail(t)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
source('C:/Users/Anselmo/OneDrive/Documents/R/coursera_data-analysis/rankall.R', encoding = 'UTF-8')
# 4 Ranking hospitals in all states
#
# Write a function called rankall that takes two arguments: an outcome name
# (outcome) and a hospital ranking (num). The function reads the
# outcome-of-care-measures.csv ﬁle and returns a 2-column data frame containing
# the hospital in each state that has the ranking speciﬁed in num. For example
# the function call rankall("heart attack", "best") would return a data frame
# containing the names of the hospitals that are the best in their respective
# states for 30-day heart attack death rates. The function should return a value
# for every state (some may be NA). The ﬁrst column in the data frame is named
# hospital, which contains the hospital name, and the second column is named
# state, which contains the 2-character abbreviation for the state name.
# Hospitals that do not have data on a particular outcome should be excluded
# from the set of hospitals when deciding the rankings.
# Handling ties. The rankall function should handle ties in the 30-day mortality
# rates in the same way that the rankhospital function handles ties.
rankall <- function(outcome, num = "best") {
## Read outcome data
dfile <- read.csv('outcome-of-care-measures.csv')
## Check that state and outcome are valid
# Hospital Name varchar(50) = col 2
# State varchar(2) = col 7
# Hospital 30-day Death Rates from Heart Attack =  col 11
# Hospital 30-day Death Rates from Heart Failure = col 17
# Hospital 30-day Death Rates from Pneumonia = col 23
subfile <- dfile[, c(2, 7, 11, 17, 23)]
rm(dfile)
names(subfile) <- c('Hospital', 'State', 'heart.attack', 'heart.failure', 'pneumonia')
options(warn = -1)
subfile[3:5] <- sapply(subfile[3:5], as.numeric)
options(warn = 0)
state_list <- sort(unique(subfile$State))
outcome_list <- c('heart attack', 'heart failure', 'pneumonia')
outcome_col <- c('heart attack' = 3, 'heart failure' = 4, 'pneumonia' = 5)
## Check outcome validity
if (!(as.character(outcome) %in% outcome_list)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
##
## Remove NAs
subfile <- subfile[complete.cases(subfile[, outcome_col[[outcome]]]), ]
## Order by outcome and Hospital Name
subfile <- subfile[order(subfile[, 2], subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
if (num == 'worst') {
subfile <- subfile[order(subfile[, 2], -subfile[, outcome_col[[outcome]]], subfile[, 1]), ]
}
if (!is.numeric(num)) {
num <- 1
}
## Return a data frame with the hospital names and the ## (abbreviated) state name
temp <- split(subfile, subfile$State)
temp <- lapply(temp, function(x) with(x, x[num, ]))
## Initiate an empty data frame
df <- data.frame(hospital = character(), state = character())
for (number in seq_along(state_list)) {
df[number, 1] <- temp[[number]][[1]]
df[number, 2] <- state_list[number]
}
df
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
unlist(temp)
